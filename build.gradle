
allprojects {
	apply plugin: 'java'
	apply plugin: 'jacoco'

	repositories {
		mavenLocal()
		mavenCentral()
	}	
}

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:2.0.0"
	classpath "com.adarshr:gradle-test-logger-plugin:2.0.0"
  }
}

allprojects {
	apply plugin: 'eclipse'
	apply plugin: 'com.github.spotbugs'
	apply plugin: 'maven-publish'
	apply plugin: 'com.adarshr.test-logger'
	
	def branch = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
	def revCount = "git rev-list HEAD --count".execute().text.trim()
	def branchIndicator = ((branch == "master") ? "" : "-" + branch)
	
	version = "0.0." + revCount + branchIndicator
	group = "nl.gingerbeard"
	
	dependencies {
		testCompile('org.junit.jupiter:junit-jupiter-api:5.3.2')
		testCompile('org.junit.jupiter:junit-jupiter-params:5.3.2')
		testRuntime('org.junit.jupiter:junit-jupiter-engine:5.3.2')
		testCompile('junit:junit:4.12')
		testCompile('org.mockito:mockito-core:2.25.1')
		compile group: 'com.google.guava', name: 'guava', version: '23.5-jre'
	}


	publishing {
		publishing {
			publications {
				maven(MavenPublication) {
					from components.java
				}
			}
			repositories {
				maven {
					name 'nexus'
					url project.repoURL
					credentials {
						username project.repoUser
						password project.repoPassword
					}
				}
			}
		}
	}
	
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	artifacts {
		archives sourcesJar
	}

	test {
		jacocoTestReport {
			reports {
				xml.enabled false
				csv.enabled false
			}

			afterEvaluate {
				classDirectories = files(classDirectories.files.collect {
					fileTree(dir: it,
							exclude: ['**Test**'])
				})
			}
		}

		useJUnitPlatform()
	}

	
	tasks.withType(Test) {
        maxParallelForks = Runtime.runtime.availableProcessors()
    }
	
	testlogger {
		theme 'mocha-parallel'
	}
}


task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true		
		xml.enabled = false
        csv.enabled = false
    }
}